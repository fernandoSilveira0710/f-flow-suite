const axios = require('axios');
const fs = require('fs');
const path = require('path');

async function configureLicense() {
  try {
    console.log('üîß Configurando licen√ßa no client-local...');
    
    // 1. Ativar licen√ßa no Hub
    console.log('üìù Ativando licen√ßa no Hub...');
    const hubResponse = await axios.post('http://localhost:8081/licenses/activate', {
      tenantId: 'cf0fee8c-5cb6-493b-8f02-d4fc045b114b',
      deviceId: 'test-device-123',
      plan: 'B√°sico',
      planId: 'starter',
      features: ['basic_features']
    });
    
    if (hubResponse.status !== 201) {
      throw new Error('Falha na ativa√ß√£o no Hub');
    }
    
    const licenseToken = hubResponse.data.licenseToken;
    console.log('‚úÖ Licen√ßa ativada no Hub!');
    console.log('üé´ Token:', licenseToken.substring(0, 50) + '...');
    
    // 2. Salvar token em arquivo para o client-local
    const licenseFilePath = path.join(__dirname, 'license.jwt');
    fs.writeFileSync(licenseFilePath, licenseToken);
    console.log('üíæ Token salvo em license.jwt');
    
    // 3. Verificar se o client-local consegue ler a licen√ßa
    console.log('üîç Testando verifica√ß√£o no client-local...');
    
    // Aguardar um pouco para o client-local processar
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    try {
      const currentResponse = await axios.get('http://localhost:3001/licensing/current');
      console.log('‚úÖ Licen√ßa atual no client-local:', currentResponse.data);
    } catch (error) {
      console.log('‚ö†Ô∏è Client-local ainda n√£o reconheceu a licen√ßa');
      
      // Tentar for√ßar atualiza√ß√£o do cache
      try {
        const cacheResponse = await axios.post('http://localhost:3001/licensing/persist', {
          tenantId: 'cf0fee8c-5cb6-493b-8f02-d4fc045b114b',
          userId: 'test-user',
          licenseData: hubResponse.data
        });
        console.log('‚úÖ Cache atualizado:', cacheResponse.data);
        
        // Verificar novamente
        const retryResponse = await axios.get('http://localhost:3001/licensing/current');
        console.log('‚úÖ Licen√ßa ap√≥s cache:', retryResponse.data);
        
      } catch (cacheError) {
        console.log('‚ùå Erro ao atualizar cache:', cacheError.response?.data || cacheError.message);
      }
    }
    
    // 4. Testar funcionamento offline
    console.log('üîå Testando funcionamento offline...');
    
    // Simular verifica√ß√£o offline usando o cache
    try {
      const offlineResponse = await axios.get('http://localhost:3001/licensing/status', {
        params: { tenantId: 'cf0fee8c-5cb6-493b-8f02-d4fc045b114b' }
      });
      console.log('‚úÖ Status offline:', offlineResponse.data);
    } catch (offlineError) {
      console.log('‚ö†Ô∏è Endpoint de status n√£o dispon√≠vel:', offlineError.response?.status);
    }
    
    console.log('üéâ Configura√ß√£o conclu√≠da!');
    
  } catch (error) {
    console.error('üí• Erro na configura√ß√£o:', error.message);
    if (error.response) {
      console.error('üìã Detalhes:', error.response.data);
    }
  }
}

configureLicense();