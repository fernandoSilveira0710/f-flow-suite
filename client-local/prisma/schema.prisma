generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Sale {
  id         String    @id @default(uuid())
  code       String    @unique
  operator   String
  payment    String
  status     String    @default("paid")
  total      Decimal   @default(0)
  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  items      SaleItem[]

  @@index([customerId])
}

model SaleItem {
  id        String   @id @default(uuid())
  saleId    String
  sale      Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  qty       Int
  unitPrice Decimal
  subtotal  Decimal
  createdAt DateTime @default(now())

  @@index([saleId])
  @@index([productId])
}

model Product {
  id          String   @id @default(uuid())
  sku         String?  @unique
  name        String
  description String?
  salePrice   Decimal  // renamed from price
  costPrice   Decimal?
  stockQty    Int      @default(0) // renamed from stock
  category    String?
  barcode     String?  @unique
  unit        String?  // Added field for product unit
  minStock    Int?     // Added field for minimum stock level
  maxStock    Int?     // Added field for maximum stock level
  trackStock  Boolean  @default(true) // Added field to enable/disable stock tracking
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  stockMovements StockMovement[]
  saleItems   SaleItem[]
  inventoryAdjustments InventoryAdjustment[]
  groomingItems GroomingItem[]
}

model InventoryAdjustment {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  delta     Int      // positive for increase, negative for decrease
  reason    String
  createdAt DateTime @default(now())

  @@index([productId])
}

model Customer {
  id           String    @id @default(uuid())
  name         String
  documento    String?   // CPF/CNPJ
  email        String?   @unique
  phone        String?
  dataNascISO  DateTime? // Data de nascimento
  tags         String?   // JSON string for tags
  notes        String?   // Notas/observações
  address      String?
  active       Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  appointments Appointment[]
  sales        Sale[]
  pets         Pet[]
  groomingTickets GroomingTicket[]
}

model Pet {
  id           String    @id @default(uuid())
  tutorId      String
  tutor        Customer  @relation(fields: [tutorId], references: [id])
  name         String
  species      String    // espécie (dog, cat, etc.)
  breed        String?   // raça
  weight       Decimal?  // peso
  birthDate    DateTime? // dataNascimento
  observations String?   // observações
  active       Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  appointments Appointment[]
  groomingTickets GroomingTicket[]
  checkIns     CheckIn[]

  @@index([tutorId])
}

model Service {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Decimal
  duration    Int      // in minutes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  appointments Appointment[]
  groomingItems GroomingItem[]
}

model Professional {
  id        String   @id @default(uuid())
  name      String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  appointments Appointment[]
  checkIns  CheckIn[]
}

model Appointment {
  id             String       @id @default(uuid())
  customerId     String?
  customer       Customer?    @relation(fields: [customerId], references: [id])
  petId          String?
  pet            Pet?         @relation(fields: [petId], references: [id])
  serviceId      String?
  service        Service?     @relation(fields: [serviceId], references: [id])
  professionalId String?
  professional   Professional? @relation(fields: [professionalId], references: [id])
  serviceType    String       // kept for backward compatibility
  date           DateTime
  startTime      String?
  endTime        String?
  duration       Int          // in minutes
  status         String       @default("scheduled") // scheduled, confirmed, in_progress, completed, cancelled
  notes          String?
  price          Decimal?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([customerId])
  @@index([petId])
  @@index([serviceId])
  @@index([professionalId])
}

model GroomingTicket {
  id        String   @id @default(uuid())
  petId     String
  pet       Pet      @relation(fields: [petId], references: [id])
  tutorId   String
  tutor     Customer @relation(fields: [tutorId], references: [id])
  status    String   @default("pending") // pending, in_progress, completed, cancelled
  createdAt DateTime @default(now())
  items     GroomingItem[]

  @@index([petId])
  @@index([tutorId])
}

model GroomingItem {
  id        String         @id @default(uuid())
  ticketId  String
  ticket    GroomingTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  serviceId String?
  service   Service?       @relation(fields: [serviceId], references: [id])
  productId String?
  product   Product?       @relation(fields: [productId], references: [id])
  name      String
  price     Decimal
  qty       Int            @default(1)

  @@index([ticketId])
  @@index([serviceId])
  @@index([productId])
}

model Resource {
  id        String   @id @default(uuid())
  name      String
  type      String   // equipment, room, tool, etc.
  createdAt DateTime @default(now())
}

model CheckIn {
  id             String       @id @default(uuid())
  petId          String
  pet            Pet          @relation(fields: [petId], references: [id])
  professionalId String
  professional   Professional @relation(fields: [professionalId], references: [id])
  checkInAt      DateTime     @default(now())
  checkOutAt     DateTime?
  notes          String?

  @@index([petId])
  @@index([professionalId])
}

model Configuration {
  id    String @id @default(uuid())
  key   String @unique
  value String
}

model StockMovement {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  type      String   // in, out, adjustment
  quantity  Int
  reason    String?
  createdAt DateTime @default(now())

  @@index([productId])
}

model OutboxEvent {
  id        String   @id @default(uuid())
  eventType String
  payload   String   // JSON string
  processed Boolean  @default(false)
  createdAt DateTime @default(now())
  processedAt DateTime?

  @@index([processed])
  @@index([eventType])
}