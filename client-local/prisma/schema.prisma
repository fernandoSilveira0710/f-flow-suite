generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Sale {
  id            String     @id @default(uuid())
  code          String     @unique
  operator      String
  paymentMethod String
  status        String     @default("paid")
  total         Decimal    @default(0)
  customerId    String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  customer      Customer?  @relation(fields: [customerId], references: [id])
  items         SaleItem[]

  @@index([customerId])
}

model SaleItem {
  id        String   @id @default(uuid())
  saleId    String
  productId String
  qty       Int
  unitPrice Decimal
  subtotal  Decimal
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  sale      Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)

  @@index([saleId])
  @@index([productId])
}

model Product {
  id                   String                @id @default(uuid())
  sku                  String?               @unique
  name                 String
  description          String?
  salePrice            Decimal
  costPrice            Decimal?
  stockQty             Int                   @default(0)
  category             String?
  barcode              String?               @unique
  unit                 String?
  minStock             Int?
  maxStock             Int?
  trackStock           Boolean               @default(true)
  active               Boolean               @default(true)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  groomingItems        GroomingItem[]
  inventoryAdjustments InventoryAdjustment[]
  saleItems            SaleItem[]
  stockMovements       StockMovement[]
}

model InventoryAdjustment {
  id        String   @id @default(uuid())
  productId String
  delta     Int
  reason    String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])

  @@index([productId])
}

model Customer {
  id              String           @id @default(uuid())
  name            String
  documento       String?
  email           String?          @unique
  phone           String?
  dataNascISO     DateTime?
  tags            String?
  notes           String?
  address         String?
  active          Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  appointments    Appointment[]
  groomingTickets GroomingTicket[]
  pets            Pet[]
  sales           Sale[]
}

model Pet {
  id              String           @id @default(uuid())
  tutorId         String
  name            String
  species         String
  breed           String?
  weight          Decimal?
  birthDate       DateTime?
  observations    String?
  active          Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  appointments    Appointment[]
  checkIns        CheckIn[]
  groomingTickets GroomingTicket[]
  tutor           Customer         @relation(fields: [tutorId], references: [id])

  @@index([tutorId])
}

model Service {
  id            String         @id @default(uuid())
  name          String
  description   String?
  price         Decimal
  duration      Int
  active        Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  appointments  Appointment[]
  groomingItems GroomingItem[]
}

model Professional {
  id              String           @id @default(uuid())
  name            String
  role            String
  active          Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  appointments    Appointment[]
  checkIns        CheckIn[]
  groomingTickets GroomingTicket[]
}

model Appointment {
  id             String        @id @default(uuid())
  customerId     String?
  petId          String?
  serviceId      String?
  professionalId String?
  resourceId     String?
  serviceType    String
  date           DateTime
  startTime      String?
  endTime        String?
  duration       Int
  status         String        @default("scheduled")
  notes          String?
  price          Decimal?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  resource       Resource?     @relation(fields: [resourceId], references: [id])
  professional   Professional? @relation(fields: [professionalId], references: [id])
  service        Service?      @relation(fields: [serviceId], references: [id])
  pet            Pet?          @relation(fields: [petId], references: [id])
  customer       Customer?     @relation(fields: [customerId], references: [id])

  @@index([customerId])
  @@index([petId])
  @@index([serviceId])
  @@index([professionalId])
  @@index([resourceId])
}

model GroomingTicket {
  id             String         @id @default(uuid())
  petId          String
  tutorId        String
  professionalId String?
  code           String         @unique
  status         String         @default("aberto")
  total          Decimal        @default(0)
  notes          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  items          GroomingItem[]
  professional   Professional?  @relation(fields: [professionalId], references: [id])
  tutor          Customer       @relation(fields: [tutorId], references: [id])
  pet            Pet            @relation(fields: [petId], references: [id])

  @@index([petId])
  @@index([tutorId])
  @@index([professionalId])
}

model GroomingItem {
  id        String         @id @default(uuid())
  ticketId  String
  serviceId String?
  productId String?
  name      String
  price     Decimal
  qty       Int            @default(1)
  createdAt DateTime       @default(now())
  product   Product?       @relation(fields: [productId], references: [id])
  service   Service?       @relation(fields: [serviceId], references: [id])
  ticket    GroomingTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId])
  @@index([serviceId])
  @@index([productId])
}

model Resource {
  id           String        @id @default(uuid())
  name         String
  type         String
  description  String?
  active       Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
}

model CheckIn {
  id             String       @id @default(uuid())
  petId          String
  professionalId String
  checkInAt      DateTime     @default(now())
  checkOutAt     DateTime?
  notes          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  professional   Professional @relation(fields: [professionalId], references: [id])
  pet            Pet          @relation(fields: [petId], references: [id])

  @@index([petId])
  @@index([professionalId])
}

model Configuration {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  category    String   @default("general")
  type        String   @default("string")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
}

model StockMovement {
  id        String   @id @default(uuid())
  productId String
  type      String
  quantity  Int
  reason    String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])

  @@index([productId])
}

model OutboxEvent {
  id          String    @id @default(uuid())
  eventType   String
  payload     String
  processed   Boolean   @default(false)
  status      String?
  createdAt   DateTime  @default(now())
  processedAt DateTime?
  updatedAt   DateTime  @updatedAt

  @@index([processed])
  @@index([eventType])
  @@index([status])
}
