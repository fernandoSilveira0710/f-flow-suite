name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        project: [hub, client-local, site]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project }}/package-lock.json

      - name: Install root dependencies (ESLint config)
        run: npm ci

      - name: Install dependencies (site - install)
        if: ${{ matrix.project == 'site' }}
        working-directory: ${{ matrix.project }}
        run: npm install

      - name: Install dependencies (others - ci)
        if: ${{ matrix.project != 'site' }}
        working-directory: ${{ matrix.project }}
        run: npm ci

      - name: Run ESLint
        working-directory: ${{ matrix.project }}
        run: npm run lint

      - name: Run Prettier check
        working-directory: ${{ matrix.project }}
        run: npm run format:check
        continue-on-error: true

      - name: Run tests
        if: ${{ matrix.project != 'site' }}
        working-directory: ${{ matrix.project }}
        run: npm test
        env:
          CI: true

      - name: Upload test coverage
        if: matrix.project != 'site'
        uses: codecov/codecov-action@v3
        with:
          file: ${{ matrix.project }}/coverage/lcov.info
          flags: ${{ matrix.project }}
          name: ${{ matrix.project }}-coverage

  build-hub:
    name: Build Hub
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: hub/package-lock.json

      - name: Install dependencies
        working-directory: hub
        run: npm ci

      - name: Generate Prisma client
        working-directory: hub
        run: npx prisma generate

      - name: Build application
        working-directory: hub
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: hub-build
          path: hub/dist/
          retention-days: 7

  build-site:
    name: Build Site
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: site/package-lock.json

      - name: Install dependencies
        working-directory: site
        run: npm install

      - name: Build application
        working-directory: site
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: site-build
          path: site/dist/
          retention-days: 7

  build-client-binaries:
    name: Build Client Binaries
    runs-on: ${{ matrix.os }}
    needs: lint-and-test
    
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win32
            arch: x64
            ext: .exe
          - os: macos-latest
            platform: darwin
            arch: x64
            ext: ''
          - os: ubuntu-latest
            platform: linux
            arch: x64
            ext: ''
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: client-local/package-lock.json

      - name: Install dependencies
        working-directory: client-local
        run: npm ci

      - name: Generate Prisma client
        working-directory: client-local
        run: npx prisma generate

      - name: Build application
        working-directory: client-local
        run: npm run build

      - name: Create binary with pkg
        working-directory: client-local
        run: npm run build:pkg

      - name: Rename binary
        shell: bash
        working-directory: client-local
        run: |
          if [ "${{ matrix.platform }}" = "win32" ]; then
            mv f-flow-client-win.exe f-flow-client-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.ext }}
          elif [ "${{ matrix.platform }}" = "darwin" ]; then
            mv f-flow-client-macos f-flow-client-${{ matrix.platform }}-${{ matrix.arch }}
          else
            mv f-flow-client-linux f-flow-client-${{ matrix.platform }}-${{ matrix.arch }}
          fi

      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: client-binary-${{ matrix.platform }}-${{ matrix.arch }}
          path: client-local/f-flow-client-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.ext }}
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    strategy:
      matrix:
        project: [hub, client-local, site]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project }}/package-lock.json

      - name: Install dependencies (site - install)
        if: ${{ matrix.project == 'site' }}
        working-directory: ${{ matrix.project }}
        run: npm install

      - name: Install dependencies (others - ci)
        if: ${{ matrix.project != 'site' }}
        working-directory: ${{ matrix.project }}
        run: npm ci

      - name: Run npm audit
        working-directory: ${{ matrix.project }}
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --project-name=${{ matrix.project }} --file=${{ matrix.project }}/package.json
        continue-on-error: true