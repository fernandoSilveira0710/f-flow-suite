name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        project: [hub, client-local, site]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project }}/package-lock.json

      - name: Install dependencies
        if: ${{ matrix.project != 'site' }}
        working-directory: ${{ matrix.project }}
        run: npm ci

      - name: Install dependencies (site)
        if: ${{ matrix.project == 'site' }}
        working-directory: ${{ matrix.project }}
        run: npm install

      - name: Run npm audit
        working-directory: ${{ matrix.project }}
        run: |
          npm audit --audit-level=moderate --json > audit-results.json || true
          
      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: audit-results-${{ matrix.project }}
          path: ${{ matrix.project }}/audit-results.json
          retention-days: 30

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --project-name=${{ matrix.project }} --file=${{ matrix.project }}/package.json --json
        continue-on-error: true

  code-scan:
    name: Code Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  secret-scan:
    name: Secret Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  docker-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Hub Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./hub
          load: true
          tags: f-flow-hub:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'f-flow-hub:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        project: [hub, client-local, site]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project }}/package-lock.json

      - name: Install dependencies
        if: ${{ matrix.project != 'site' }}
        working-directory: ${{ matrix.project }}
        run: npm ci

      - name: Install dependencies (site)
        if: ${{ matrix.project == 'site' }}
        working-directory: ${{ matrix.project }}
        run: npm install

      - name: Install license-checker
        run: npm install -g license-checker

      - name: Check licenses
        working-directory: ${{ matrix.project }}
        run: |
          license-checker --json --out licenses.json
          license-checker --summary

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report-${{ matrix.project }}
          path: ${{ matrix.project }}/licenses.json
          retention-days: 30

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan, secret-scan, docker-scan, license-scan]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate security report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "" >> security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Dependency Scan Results" >> security-report.md
          for project in hub client-local site; do
            if [ -f "audit-results-$project/audit-results.json" ]; then
              echo "### $project" >> security-report.md
              vulnerabilities=$(jq '.metadata.vulnerabilities | to_entries | map(select(.value > 0)) | length' "audit-results-$project/audit-results.json" 2>/dev/null || echo "0")
              echo "- Vulnerabilities found: $vulnerabilities" >> security-report.md
            fi
          done
          
          echo "" >> security-report.md
          echo "## License Compliance" >> security-report.md
          for project in hub client-local site; do
            if [ -f "license-report-$project/licenses.json" ]; then
              echo "### $project" >> security-report.md
              licenses=$(jq 'keys | length' "license-report-$project/licenses.json" 2>/dev/null || echo "0")
              echo "- Total dependencies: $licenses" >> security-report.md
            fi
          done

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 90

      - name: Comment PR with security report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ”’ Security Scan Results\n\n${report}`
            });

  notify-security-issues:
    name: Notify Security Issues
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan, secret-scan, docker-scan]
    if: failure()
    
    steps:
      - name: Notify security team
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "ðŸš¨ Security vulnerabilities detected in F-Flow Suite! Please review the security scan results."
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}