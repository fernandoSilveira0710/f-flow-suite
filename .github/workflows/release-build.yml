name: Build Windows Installer on Release

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build-windows-installer:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install root dependencies
        run: |
          npm ci

      - name: Install client-local dependencies
        working-directory: client-local
        run: |
          npm ci

      - name: Build ERP frontend (Vite)
        run: |
          npm run build

      - name: Generate Prisma Client (client-local)
        working-directory: client-local
        env:
          NODE_ENV: production
        run: |
          npm run prisma:generate

      - name: Build client-local dist
        working-directory: client-local
        run: |
          npm run build

      - name: Build ERP server exe (pkg)
        working-directory: client-local
        run: |
          npx pkg installers\\windows\\erp-server.js --targets node18-win-x64 --output build\\erp-server.exe

      - name: Copy Prisma engine to build dir
        working-directory: client-local
        shell: pwsh
        run: |
          $engineCandidates = @(
            "node_modules/@prisma/client/libquery_engine-windows.dll.node",
            "node_modules/@prisma/engines/libquery_engine-windows.dll.node",
            "node_modules/@prisma/engines/query_engine-windows.dll.node"
          )
          $engineOut = "build/query_engine-windows.dll.node"
          foreach ($c in $engineCandidates) {
            if (Test-Path $c) { Copy-Item $c -Destination $engineOut -Force; Write-Host "Copied engine: $c -> $engineOut"; break }
          }

      - name: Build client-local exe (pkg)
        working-directory: client-local
        run: |
          npx pkg dist/main.js --targets node18-win-x64 --output build/f-flow-client.exe

      - name: Download Node.js portable (win-x64)
        shell: pwsh
        run: |
          $version = "18.20.3"
          $zipUrl = "https://nodejs.org/dist/v$version/node-v$version-win-x64.zip"
          $outZip = "client-local/installers/windows/build/node-win-x64.zip"
          New-Item -ItemType Directory -Force -Path (Split-Path $outZip -Parent) | Out-Null
          Invoke-WebRequest -Uri $zipUrl -OutFile $outZip
          Expand-Archive -Path $outZip -DestinationPath "client-local/installers/windows/build/" -Force
          $expanded = "client-local/installers/windows/build/node-v$version-win-x64"
          if (Test-Path $expanded) { Rename-Item -Path $expanded -NewName "node" -Force }

      - name: Install Inno Setup
        run: |
          choco install innosetup -y

      - name: Compile Inno Setup installer
        working-directory: client-local\installers\windows
        shell: pwsh
        run: |
          $iscc = "C:\\Program Files (x86)\\Inno Setup 6\\ISCC.exe"
          if (-not (Test-Path $iscc)) { $iscc = "C:\\Program Files\\Inno Setup 6\\ISCC.exe" }
          & $iscc f-flow-client-installer.iss

      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v4
        with:
          name: f-flow-windows-installer
          path: client-local\installers\windows\Output\*

      - name: Attach installer to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: client-local\installers\windows\Output\*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}