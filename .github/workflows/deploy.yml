name: Deploy

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy-hub:
    name: Deploy Hub
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set environment variables
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
            echo "IMAGE_TAG=latest" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
            echo "IMAGE_TAG=develop" >> $GITHUB_ENV
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./hub
          push: true
          tags: ghcr.io/${{ github.repository }}/hub:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to staging
        if: env.ENVIRONMENT == 'staging'
        run: |
          echo "Deploying to staging environment..."
          # Here you would typically deploy to your staging server
          # Example: kubectl, docker-compose, or cloud provider CLI
          
      - name: Deploy to production
        if: env.ENVIRONMENT == 'production'
        run: |
          echo "Deploying to production environment..."
          # Here you would typically deploy to your production server
          # Example: kubectl, docker-compose, or cloud provider CLI

      - name: Run database migrations
        run: |
          echo "Running database migrations for ${{ env.ENVIRONMENT }}..."
          # Example: kubectl exec or docker exec to run migrations

      - name: Health check
        run: |
          echo "Performing health check for ${{ env.ENVIRONMENT }}..."
          # Example: curl to health endpoint
          # curl -f https://api-${{ env.ENVIRONMENT }}.f-flow.com/health

  deploy-site:
    name: Deploy Site
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: site/package-lock.json

      - name: Install dependencies
        working-directory: site
        run: npm ci

      - name: Set environment variables
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
            echo "VITE_API_URL=https://api.f-flow.com" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
            echo "VITE_API_URL=https://api-staging.f-flow.com" >> $GITHUB_ENV
          fi

      - name: Build site
        working-directory: site
        run: npm run build
        env:
          VITE_API_URL: ${{ env.VITE_API_URL }}

      - name: Deploy to GitHub Pages (Production)
        if: env.ENVIRONMENT == 'production'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site/dist
          cname: f-flow.2fsolutions.com.br

      - name: Deploy to Netlify (Staging)
        if: env.ENVIRONMENT == 'staging'
        uses: nwtgck/actions-netlify@v2.1
        with:
          publish-dir: './site/dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-hub, deploy-site]
    if: always()
    
    steps:
      - name: Set environment
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          fi

      - name: Notify success
        if: needs.deploy-hub.result == 'success' && needs.deploy-site.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "✅ F-Flow Suite deployed successfully to ${{ env.ENVIRONMENT }}!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify failure
        if: needs.deploy-hub.result == 'failure' || needs.deploy-site.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "❌ F-Flow Suite deployment to ${{ env.ENVIRONMENT }} failed!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-hub, deploy-site]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Rollback production deployment
        run: |
          echo "Rolling back production deployment..."
          # Here you would implement rollback logic
          # Example: deploy previous version, restore database backup, etc.

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: warning
          text: "⚠️ F-Flow Suite production deployment rolled back due to failure!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}