generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Org {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  tenants   Tenant[]
}

model Tenant {
  id              String           @id @default(uuid())
  orgId           String
  org             Org              @relation(fields: [orgId], references: [id], onDelete: Cascade)
  slug            String           @unique
  planId          String?
  createdAt       DateTime         @default(now())
  users           User[]
  licenses        License[]
  devices         Device[]
  outbox          OutboxEvent[]
  inbox           InboxCommand[]
  paymentMethods  PaymentMethod[]
  subscriptions   Subscription[]
  
  // Business entities
  products             Product[]
  sales                Sale[]
  customers            Customer[]
  services             Service[]
  professionals        Professional[]
  appointments         Appointment[]
  groomingTickets      GroomingTicket[]
  resources            Resource[]
  checkIns             CheckIn[]
  configurations       Configuration[]
  roles                Role[]
  inventory            Inventory[]
  orders               Order[]
}

model User {
  id          String   @id @default(uuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  email       String
  displayName String
  role        String   @default("operator")
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([tenantId, email])
  @@index([tenantId, active])
}

model License {
  id        String   @id @default(uuid())
  tenantId  String   @unique
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  planKey   String
  status    String
  maxSeats  Int      @default(1)
  expiry    DateTime
  graceDays Int      @default(7)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Device {
  id          String   @id @default(uuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name        String
  fingerprint String   @unique
  activatedAt DateTime @default(now())
  revokedAt   DateTime?
}

model Entitlement {
  id      String @id @default(uuid())
  planKey String
  key     String
  value   String

  @@unique([planKey, key], name: "planKey_key")
}

model PaymentMethod {
  id                      String   @id @default(uuid())
  tenantId                String
  tenant                  Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name                    String
  type                    String   // PIX, CREDIT_CARD, DEBIT_CARD, BANK_SLIP, CASH, etc.
  active                  Boolean  @default(true)
  
  // Payment method specific settings
  jurosPorParcelaPct      Float?
  descontoFixoPct         Float?
  taxaFixa                Float?
  
  // Integration settings (JSON string for SQLite)
  integrationSettings     String?
  
  // Validation rules
  valorMin                Float?
  valorMax                Float?
  
  // Visibility settings
  visivelSomenteParaRoles String? // JSON array of role names
  
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  @@unique([tenantId, name])
  @@index([tenantId, active])
}

model OutboxEvent {
  id         String   @id @default(uuid())
  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  aggregate  String
  type       String
  payload    String
  occurredAt DateTime @default(now())
  sentAt     DateTime?

  @@index([tenantId, sentAt])
}

model InboxCommand {
  id        String   @id
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  type      String
  payload   String
  appliedAt DateTime?

  @@index([tenantId, appliedAt])
}

// ===== CORE BUSINESS ENTITIES =====

model Product {
  id          String   @id @default(uuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name        String
  description String?
  sku         String?
  barcode     String?
  category    String?
  salePrice   Float
  costPrice   Float?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  saleItems     SaleItem[]
  inventory     Inventory[]
  orderItems    OrderItem[]
  groomingItems GroomingItem[]
  
  @@unique([tenantId, sku])
  @@unique([tenantId, barcode])
  @@index([tenantId, active])
  @@index([tenantId, category])
}

model Sale {
  id          String     @id @default(uuid())
  tenantId    String
  tenant      Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customerId  String?
  customer    Customer?  @relation(fields: [customerId], references: [id])
  saleNumber  String     // Sequential number per tenant
  status      String     // DRAFT, CONFIRMED, PAID, CANCELED
  total       Float
  discount    Float?     @default(0)
  notes       String?
  saleDate    DateTime   @default(now())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  items       SaleItem[]
  
  @@unique([tenantId, saleNumber])
  @@index([tenantId, status])
  @@index([tenantId, saleDate])
  @@index([customerId])
}

model SaleItem {
  id        String  @id @default(uuid())
  saleId    String
  sale      Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  unitPrice Float
  subtotal  Float
  
  @@index([saleId])
  @@index([productId])
}



// ===== CUSTOMER & PET ENTITIES =====

model Customer {
  id          String   @id @default(uuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name        String
  email       String?
  phone       String?
  document    String?  // CPF/CNPJ
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String?  @default("BR")
  
  // Customer metadata
  tags        String?  // JSON string for tags
  notes       String?
  active      Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  sales       Sale[]
  orders      Order[]
  pets             Pet[]
  appointments     Appointment[]
  groomingTickets  GroomingTicket[]

  @@unique([tenantId, email])
  @@unique([tenantId, document])
  @@index([tenantId, active])
  @@index([tenantId, name])
}

model Pet {
  id           String    @id @default(uuid())
  tenantId     String
  tutorId      String
  tutor        Customer  @relation(fields: [tutorId], references: [id])
  name         String
  species      String    // dog, cat, etc.
  breed        String?   // raça
  weight       Decimal?  // peso
  birthDate    DateTime? // dataNascimento
  observations String?   // observações
  gender       String?   // male, female
  color        String?
  active       Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Relations
  appointments     Appointment[]
  groomingTickets  GroomingTicket[]
  checkIns         CheckIn[]

  @@index([tenantId, tutorId])
  @@index([tenantId, name])
  @@index([tenantId, species])
}

// ===== SERVICE & APPOINTMENT ENTITIES =====

model Service {
  id          String   @id @default(uuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name        String
  description String?
  category    String?
  price       Float
  duration    Int?     // duration in minutes
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  appointments    Appointment[]
  groomingItems   GroomingItem[]
  orderItems      OrderItem[]
  
  @@unique([tenantId, name])
  @@index([tenantId, active])
  @@index([tenantId, category])
}

model Professional {
  id        String   @id @default(uuid())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name      String
  role      String   // groomer, veterinarian, assistant, etc.
  phone     String?
  email     String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  appointments Appointment[]
  checkIns     CheckIn[]

  @@unique([tenantId, email])
  @@index([tenantId, role])
  @@index([tenantId, active])
}

model Appointment {
  id             String       @id @default(uuid())
  tenantId       String
  tenant         Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  petId          String
  pet            Pet          @relation(fields: [petId], references: [id])
  customerId     String
  customer       Customer     @relation(fields: [customerId], references: [id])
  serviceId      String
  service        Service      @relation(fields: [serviceId], references: [id])
  professionalId String
  professional   Professional @relation(fields: [professionalId], references: [id])
  resourceId     String?
  resource       Resource?    @relation(fields: [resourceId], references: [id])
  date           DateTime
  startTime      DateTime
  endTime        DateTime
  status         String       @default("scheduled") // scheduled, confirmed, in_progress, completed, cancelled, no_show
  notes          String?
  price          Decimal?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([tenantId, date])
  @@index([tenantId, professionalId, date])
  @@index([tenantId, petId])
  @@index([tenantId, status])
  @@index([tenantId, resourceId])
}

// ===== GROOMING ENTITIES =====

model GroomingTicket {
  id         String   @id @default(uuid())
  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  petId      String
  pet        Pet      @relation(fields: [petId], references: [id])
  tutorId    String
  tutor      Customer @relation(fields: [tutorId], references: [id])
  code       String   // ticket number for identification
  status     String   @default("pending") // pending, in_progress, completed, cancelled
  totalPrice Decimal  @default(0)
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  items GroomingItem[]

  @@unique([tenantId, code])
  @@index([tenantId, status])
  @@index([tenantId, petId])
  @@index([tenantId, createdAt])
}

model GroomingItem {
  id        String         @id @default(uuid())
  tenantId  String
  ticketId  String
  ticket    GroomingTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  serviceId String?
  service   Service?       @relation(fields: [serviceId], references: [id])
  productId String?
  product   Product?       @relation(fields: [productId], references: [id])
  name      String         // service or product name
  price     Float
  qty       Int            @default(1)
  subtotal  Float
  
  @@index([tenantId, ticketId])
  @@index([tenantId, serviceId])
  @@index([tenantId, productId])
}

model Resource {
  id           String        @id @default(uuid())
  tenantId     String
  tenant       Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name         String
  type         String        // equipment, room, tool, etc.
  description  String?
  active       Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]

  @@unique([tenantId, name])
  @@index([tenantId, type])
  @@index([tenantId, active])
}

model CheckIn {
  id             String       @id @default(uuid())
  tenantId       String
  tenant         Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  petId          String
  pet            Pet          @relation(fields: [petId], references: [id])
  professionalId String
  professional   Professional @relation(fields: [professionalId], references: [id])
  checkInAt      DateTime     @default(now())
  checkOutAt     DateTime?
  notes          String?
  
  @@index([tenantId, petId])
  @@index([tenantId, professionalId])
  @@index([tenantId, checkInAt])
}

// ===== CONFIGURATION ENTITIES =====

model Role {
  id          String   @id @default(uuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name        String
  description String?
  permissions String   // Comma-separated permission strings for SQLite compatibility
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([tenantId, name])
  @@index([tenantId, active])
}

model Inventory {
  id          String   @id @default(uuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  location    String?  // warehouse, store, etc.
  quantity    Int      @default(0)
  reserved    Int      @default(0) // reserved for orders
  weight      Float?   // peso
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([tenantId, productId, location])
  @@index([tenantId, productId])
  @@index([tenantId, location])
}

model Order {
  id          String      @id @default(uuid())
  tenantId    String
  tenant      Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customerId  String?
  customer    Customer?   @relation(fields: [customerId], references: [id])
  orderNumber String      // Sequential number per tenant
  status      String      // PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELED
  totalPrice  Float       @default(0)
  notes       String?
  orderDate   DateTime    @default(now())
  deliveryDate DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  items       OrderItem[]
  
  @@unique([tenantId, orderNumber])
  @@index([tenantId, status])
  @@index([tenantId, orderDate])
  @@index([customerId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String?
  product   Product? @relation(fields: [productId], references: [id])
  serviceId String?
  service   Service? @relation(fields: [serviceId], references: [id])
  quantity  Int
  price     Float
  notes     String?
  subtotal  Float
  
  @@index([orderId])
  @@index([productId])
  @@index([serviceId])
}

model Configuration {
  id       String @id @default(uuid())
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  key      String
  value    String
  category String? // system, business, ui, etc.
  
  @@unique([tenantId, key])
  @@index([tenantId, category])
}

// ===== PLAN AND SUBSCRIPTION ENTITIES =====

model Plan {
  id              String         @id @default(uuid())
  name            String         @unique
  description     String?
  price           Float          // Changed from Decimal to Float for SQLite
  currency        String         @default("BRL")
  maxSeats        Int            @default(1)
  maxDevices      Int            @default(1)
  featuresEnabled String         // JSON string for SQLite compatibility
  active          Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  // Relations
  subscriptions   Subscription[]
  
  @@index([active])
}

model Subscription {
  id              String            @id @default(uuid())
  tenantId        String
  tenant          Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  planId          String
  plan            Plan              @relation(fields: [planId], references: [id])
  status          String            @default("ACTIVE") // Changed from enum to string
  startAt         DateTime          @default(now())
  expiresAt       DateTime?
  canceledAt      DateTime?
  paymentData     String?           // JSON string for SQLite compatibility
  billingCycle    String            @default("MONTHLY") // Changed from enum to string
  autoRenew       Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@unique([tenantId]) // One active subscription per tenant
  @@index([tenantId, status])
  @@index([planId])
  @@index([expiresAt])
}
