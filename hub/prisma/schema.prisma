generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Org {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  tenants   Tenant[]
}

model Tenant {
  id              String           @id @default(uuid())
  orgId           String
  slug            String           @unique
  planId          String?
  createdAt       DateTime         @default(now())
  appointments    Appointment[]
  checkIns        CheckIn[]
  configurations  Configuration[]
  customers       Customer[]
  devices         Device[]
  groomingTickets GroomingTicket[]
  inbox           InboxCommand[]
  inventory       Inventory[]
  inventoryAdjustments InventoryAdjustment[]
  licenses        License?
  orders          Order[]
  outbox          OutboxEvent[]
  paymentMethods  PaymentMethod[]
  products        Product[]
  professionals   Professional[]
  resources       Resource[]
  roles           Role[]
  sales           Sale[]
  services        Service[]
  subscriptions   Subscription?
  org             Org              @relation(fields: [orgId], references: [id], onDelete: Cascade)
  users           User[]
}

model User {
  id          String   @id @default(uuid())
  tenantId    String
  email       String
  password    String   @default("")
  displayName String
  role        String   @default("operator")
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, email])
  @@index([tenantId, active])
}

model License {
  id        String   @id @default(uuid())
  tenantId  String   @unique
  planKey   String
  status    String
  maxSeats  Int      @default(1)
  expiry    DateTime
  graceDays Int      @default(7)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tokens    LicenseToken[]
}

model LicenseToken {
  id        String   @id @default(uuid())
  tenantId  String
  deviceId  String
  token     String
  issuedAt  DateTime @default(now())
  expiresAt DateTime
  revokedAt DateTime?
  license   License  @relation(fields: [tenantId], references: [tenantId], onDelete: Cascade)

  @@unique([tenantId, deviceId])
  @@index([tenantId])
  @@index([deviceId])
  @@index([expiresAt])
}

model Device {
  id          String    @id @default(uuid())
  tenantId    String
  name        String
  fingerprint String    @unique
  activatedAt DateTime  @default(now())
  revokedAt   DateTime?
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model Entitlement {
  id      String @id @default(uuid())
  planKey String
  key     String
  value   String

  @@unique([planKey, key], name: "planKey_key")
}

model PaymentMethod {
  id                      String   @id @default(uuid())
  tenantId                String
  name                    String
  type                    String
  active                  Boolean  @default(true)
  jurosPorParcelaPct      Float?
  descontoFixoPct         Float?
  taxaFixa                Float?
  integrationSettings     String?
  valorMin                Float?
  valorMax                Float?
  visivelSomenteParaRoles String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  tenant                  Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, name])
  @@index([tenantId, active])
}

model OutboxEvent {
  id         String    @id @default(uuid())
  tenantId   String
  aggregate  String
  type       String
  payload    String
  occurredAt DateTime  @default(now())
  sentAt     DateTime?
  tenant     Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, sentAt])
}

model InboxCommand {
  id        String    @id
  tenantId  String
  type      String
  payload   String
  appliedAt DateTime?
  tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, appliedAt])
}

model Product {
  id            String         @id @default(uuid())
  tenantId      String
  name          String
  description   String?
  sku           String?
  barcode       String?
  category      String?
  salePrice     Float
  costPrice     Float?
  active        Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  groomingItems GroomingItem[]
  inventory     Inventory[]
  inventoryAdjustments InventoryAdjustment[]
  orderItems    OrderItem[]
  tenant        Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  saleItems     SaleItem[]

  @@unique([tenantId, sku])
  @@unique([tenantId, barcode])
  @@index([tenantId, active])
  @@index([tenantId, category])
}

model Sale {
  id         String     @id @default(uuid())
  tenantId   String
  customerId String?
  saleNumber String
  status     String
  total      Float
  discount   Float?     @default(0)
  notes      String?
  saleDate   DateTime   @default(now())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  customer   Customer?  @relation(fields: [customerId], references: [id])
  tenant     Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  items      SaleItem[]

  @@unique([tenantId, saleNumber])
  @@index([tenantId, status])
  @@index([tenantId, saleDate])
  @@index([customerId])
}

model SaleItem {
  id        String  @id @default(uuid())
  saleId    String
  productId String
  quantity  Int
  unitPrice Float
  subtotal  Float
  product   Product @relation(fields: [productId], references: [id])
  sale      Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)

  @@index([saleId])
  @@index([productId])
}

model Customer {
  id              String           @id @default(uuid())
  tenantId        String
  name            String
  email           String?
  phone           String?
  document        String?
  address         String?
  city            String?
  state           String?
  zipCode         String?
  country         String?          @default("BR")
  tags            String?
  notes           String?
  active          Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  appointments    Appointment[]
  tenant          Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  groomingTickets GroomingTicket[]
  orders          Order[]
  pets            Pet[]
  sales           Sale[]

  @@unique([tenantId, email])
  @@unique([tenantId, document])
  @@index([tenantId, active])
  @@index([tenantId, name])
}

model Pet {
  id              String           @id @default(uuid())
  tenantId        String
  tutorId         String
  name            String
  species         String
  breed           String?
  weight          Decimal?
  birthDate       DateTime?
  observations    String?
  gender          String?
  color           String?
  active          Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  appointments    Appointment[]
  checkIns        CheckIn[]
  groomingTickets GroomingTicket[]
  tutor           Customer         @relation(fields: [tutorId], references: [id])

  @@index([tenantId, tutorId])
  @@index([tenantId, name])
  @@index([tenantId, species])
}

model Service {
  id            String         @id @default(uuid())
  tenantId      String
  name          String
  description   String?
  category      String?
  price         Float
  duration      Int?
  active        Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  appointments  Appointment[]
  groomingItems GroomingItem[]
  orderItems    OrderItem[]
  tenant        Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, name])
  @@index([tenantId, active])
  @@index([tenantId, category])
}

model Professional {
  id           String        @id @default(uuid())
  tenantId     String
  name         String
  role         String
  phone        String?
  email        String?
  active       Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  checkIns     CheckIn[]
  tenant       Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, email])
  @@index([tenantId, role])
  @@index([tenantId, active])
}

model Appointment {
  id             String       @id @default(uuid())
  tenantId       String
  petId          String
  customerId     String
  serviceId      String
  professionalId String
  resourceId     String?
  date           DateTime
  startTime      DateTime
  endTime        DateTime
  status         String       @default("scheduled")
  notes          String?
  price          Decimal?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  resource       Resource?    @relation(fields: [resourceId], references: [id])
  professional   Professional @relation(fields: [professionalId], references: [id])
  service        Service      @relation(fields: [serviceId], references: [id])
  customer       Customer     @relation(fields: [customerId], references: [id])
  pet            Pet          @relation(fields: [petId], references: [id])
  tenant         Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, date])
  @@index([tenantId, professionalId, date])
  @@index([tenantId, petId])
  @@index([tenantId, status])
  @@index([tenantId, resourceId])
}

model GroomingTicket {
  id         String         @id @default(uuid())
  tenantId   String
  petId      String
  tutorId    String
  code       String
  status     String         @default("pending")
  totalPrice Decimal        @default(0)
  notes      String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  items      GroomingItem[]
  tutor      Customer       @relation(fields: [tutorId], references: [id])
  pet        Pet            @relation(fields: [petId], references: [id])
  tenant     Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, code])
  @@index([tenantId, status])
  @@index([tenantId, petId])
  @@index([tenantId, createdAt])
}

model GroomingItem {
  id        String         @id @default(uuid())
  tenantId  String
  ticketId  String
  serviceId String?
  productId String?
  name      String
  price     Float
  qty       Int            @default(1)
  subtotal  Float
  product   Product?       @relation(fields: [productId], references: [id])
  service   Service?       @relation(fields: [serviceId], references: [id])
  ticket    GroomingTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([tenantId, ticketId])
  @@index([tenantId, serviceId])
  @@index([tenantId, productId])
}

model Resource {
  id           String        @id @default(uuid())
  tenantId     String
  name         String
  type         String
  description  String?
  active       Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  tenant       Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, name])
  @@index([tenantId, type])
  @@index([tenantId, active])
}

model CheckIn {
  id             String       @id @default(uuid())
  tenantId       String
  petId          String
  professionalId String
  checkInAt      DateTime     @default(now())
  checkOutAt     DateTime?
  notes          String?
  professional   Professional @relation(fields: [professionalId], references: [id])
  pet            Pet          @relation(fields: [petId], references: [id])
  tenant         Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, petId])
  @@index([tenantId, professionalId])
  @@index([tenantId, checkInAt])
}

model Role {
  id          String   @id @default(uuid())
  tenantId    String
  name        String
  description String?
  permissions String
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, name])
  @@index([tenantId, active])
}

model Inventory {
  id        String   @id @default(uuid())
  tenantId  String
  productId String
  location  String?
  quantity  Int      @default(0)
  reserved  Int      @default(0)
  weight    Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, productId, location])
  @@index([tenantId, productId])
  @@index([tenantId, location])
}

model InventoryAdjustment {
  id           String   @id @default(uuid())
  tenantId     String
  productId    String
  productName  String
  productSku   String?
  delta        Int
  reason       String?
  previousStock Int?
  newStock     Int?
  adjustedAt   DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  product      Product? @relation(fields: [productId], references: [id])

  @@index([tenantId, productId])
  @@index([tenantId, adjustedAt])
}

model Order {
  id           String      @id @default(uuid())
  tenantId     String
  customerId   String?
  orderNumber  String
  status       String
  totalPrice   Float       @default(0)
  notes        String?
  orderDate    DateTime    @default(now())
  deliveryDate DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  customer     Customer?   @relation(fields: [customerId], references: [id])
  tenant       Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  items        OrderItem[]

  @@unique([tenantId, orderNumber])
  @@index([tenantId, status])
  @@index([tenantId, orderDate])
  @@index([customerId])
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String?
  serviceId String?
  quantity  Int
  price     Float
  notes     String?
  subtotal  Float
  service   Service? @relation(fields: [serviceId], references: [id])
  product   Product? @relation(fields: [productId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productId])
  @@index([serviceId])
}

model Configuration {
  id       String  @id @default(uuid())
  tenantId String
  key      String
  value    String
  category String?
  tenant   Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, key])
  @@index([tenantId, category])
}

model Plan {
  id              String         @id @default(uuid())
  name            String         @unique
  description     String?
  price           Float
  currency        String         @default("BRL")
  maxSeats        Int            @default(1)
  maxDevices      Int            @default(1)
  featuresEnabled String
  active          Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  subscriptions   Subscription[]

  @@index([active])
}

model Subscription {
  id           String    @id @default(uuid())
  tenantId     String    @unique
  planId       String
  status       String    @default("ACTIVE")
  startAt      DateTime  @default(now())
  expiresAt    DateTime?
  canceledAt   DateTime?
  paymentData  String?
  billingCycle String    @default("MONTHLY")
  autoRenew    Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  plan         Plan      @relation(fields: [planId], references: [id])
  tenant       Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, status])
  @@index([planId])
  @@index([expiresAt])
}
