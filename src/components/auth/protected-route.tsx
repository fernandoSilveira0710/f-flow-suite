import { useEffect, useState } from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '@/contexts/auth-context';
import { toast } from '@/hooks/use-toast';
import { setPlan, getCurrentPlan, PlanType } from '@/lib/entitlements';

interface ProtectedRouteProps {
  children: React.ReactNode;
  requireAuth?: boolean;
  requireLicense?: boolean;
}

export function ProtectedRoute({ 
  children, 
  requireAuth = true, 
  requireLicense = true 
}: ProtectedRouteProps) {
  const { user, licenseStatus, isLoading, isFirstInstallation } = useAuth();
  const location = useLocation();
  const [checkingInstallation, setCheckingInstallation] = useState(false);

  console.log('üõ°Ô∏è PROTECTED ROUTE - Estado atual:', {
    pathname: location.pathname,
    user: user ? 'PRESENTE' : 'AUSENTE',
    licenseStatus: licenseStatus,
    isLoading,
    requireAuth,
    requireLicense
  });

  useEffect(() => {
    console.log('üõ°Ô∏è PROTECTED ROUTE useEffect - Verificando condi√ß√µes...');
    
    // Se n√£o h√° usu√°rio e √© necess√°rio autentica√ß√£o
    if (!isLoading && requireAuth && !user) {
      console.log('‚ùå PROTECTED ROUTE - Usu√°rio n√£o autenticado, mostrando toast');
      toast({
        title: "Acesso negado",
        description: "Voc√™ precisa fazer login para acessar esta p√°gina.",
        variant: "destructive",
      });
    }

    // Se n√£o h√° licen√ßa v√°lida e √© necess√°rio licenciamento
    if (!isLoading && requireLicense && licenseStatus && !licenseStatus.isValid) {
      console.log('‚ö†Ô∏è PROTECTED ROUTE - Licen√ßa inv√°lida detectada:', licenseStatus);
      if (!licenseStatus.isInstalled) {
        console.log('üì¶ PROTECTED ROUTE - Sistema n√£o instalado');
        toast({
          title: "Sistema n√£o configurado",
          description: "Voc√™ precisa se cadastrar e configurar o sistema.",
          variant: "destructive",
        });
      } else {
        console.log('üé´ PROTECTED ROUTE - Licen√ßa expirada');
        toast({
          title: "Licen√ßa inv√°lida",
          description: "Sua licen√ßa expirou ou √© inv√°lida. Renove seu plano.",
          variant: "destructive",
        });
      }
    }
  }, [user, licenseStatus, isLoading, requireAuth, requireLicense]);

  // Sincroniza entitlements do frontend com o plano da licen√ßa v√°lida
  useEffect(() => {
    if (licenseStatus?.isValid && licenseStatus.plan) {
      const rawPlan = String(licenseStatus.plan).toLowerCase();
      // Normaliza poss√≠veis varia√ß√µes de nomes
      const map: Record<string, PlanType> = {
        starter: 'starter',
        basico: 'starter',
        b√°sico: 'starter',
        basic: 'starter',
        pro: 'pro',
        profissional: 'pro',
        max: 'max',
        enterprise: 'max'
      };
      const normalized = map[rawPlan] || (['starter','pro','max'].includes(rawPlan) ? (rawPlan as PlanType) : 'starter');
      const current = getCurrentPlan();
      if (current !== normalized) {
        console.log('üîÑ PROTECTED ROUTE - Atualizando plano local para refletir licen√ßa:', { normalized, rawPlan });
        setPlan(normalized);
        // Dispara evento para atualizar hooks que observam mudan√ßas de plano
        window.dispatchEvent(new Event('planChanged'));
      }
    }
  }, [licenseStatus]);

  // Mostrar loading enquanto verifica autentica√ß√£o
  if (isLoading || checkingInstallation) {
    console.log('‚è≥ PROTECTED ROUTE - Mostrando loading...');
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-gray-900"></div>
      </div>
    );
  }

  // Verificar autentica√ß√£o
  if (requireAuth && !user) {
    console.log('üîê PROTECTED ROUTE - Redirecionando para login (sem usu√°rio)');
    return <Navigate to="/erp/login" state={{ from: location }} replace />;
  }

  // Verificar licenciamento com l√≥gica inteligente
  if (requireLicense && licenseStatus) {
    console.log('üé´ PROTECTED ROUTE - Verificando licenciamento:', licenseStatus);
    if (!licenseStatus.isValid) {
      console.log('‚ùå PROTECTED ROUTE - Licen√ßa inv√°lida');
      if (!licenseStatus.isInstalled) {
        console.log('üì¶ PROTECTED ROUTE - Sistema n√£o instalado - verificando primeira instala√ß√£o...');
        // Sistema n√£o instalado - verificar se √© primeira instala√ß√£o
        const handleRedirect = async () => {
          setCheckingInstallation(true);
          try {
            console.log('üîç PROTECTED ROUTE - Chamando isFirstInstallation...');
            const isFirst = await isFirstInstallation();
            console.log('üîç PROTECTED ROUTE - Resultado isFirstInstallation:', isFirst);
            
            if (isFirst) {
              console.log('üÜï PROTECTED ROUTE - Primeira instala√ß√£o detectada');
              console.log('‚ö†Ô∏è PROTECTED ROUTE - BLOQUEANDO redirecionamento para manter logs do console');
              // TEMPORARIAMENTE BLOQUEADO: window.location.href = [SITE_URL from env]
              toast({
                title: "Sistema n√£o instalado",
                description: "Primeira instala√ß√£o detectada. Redirecionamento bloqueado para debug.",
                variant: "destructive"
              });
            } else {
              console.log('üë§ PROTECTED ROUTE - Usu√°rio existente sem instala√ß√£o detectado');
              console.log('‚ö†Ô∏è PROTECTED ROUTE - BLOQUEANDO redirecionamento para manter logs do console');
              // TEMPORARIAMENTE BLOQUEADO: window.location.href = [SITE_URL from env]/cadastro
              toast({
                title: "Licen√ßa inv√°lida",
                description: "Sistema sem licen√ßa v√°lida. Redirecionamento bloqueado para debug.",
                variant: "destructive"
              });
            }
          } catch (error) {
            console.error('üí• PROTECTED ROUTE - Erro ao verificar instala√ß√£o:', error);
            console.log('‚ö†Ô∏è PROTECTED ROUTE - BLOQUEANDO redirecionamento para manter logs do console');
            // TEMPORARIAMENTE BLOQUEADO: window.location.href = [SITE_URL from env]
            toast({
              title: "Erro de verifica√ß√£o",
              description: "Erro ao verificar instala√ß√£o. Redirecionamento bloqueado para debug.",
              variant: "destructive"
            });
          } finally {
            setCheckingInstallation(false);
          }
        };
        
        handleRedirect();
        return null;
      } else {
        console.log('üîÑ PROTECTED ROUTE - Sistema instalado mas licen√ßa inv√°lida - redirecionando para login');
        // Sistema instalado mas licen√ßa inv√°lida - redirecionar para login (que mostrar√° modal de planos)
        return <Navigate to="/erp/login" replace />;
      }
    }
  }

  // Se chegou at√© aqui, pode renderizar o conte√∫do
  console.log('‚úÖ PROTECTED ROUTE - Todas as verifica√ß√µes passaram, renderizando conte√∫do');
  return <>{children}</>;
}